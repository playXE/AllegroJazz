link "allegro"

struct ALLEGRO_COLOR
{
   r: f32,
   g: f32,
   b: f32,
   a: f32
}


pub extern func al_map_rgb(r: u8,g: u8,b: u8) ALLEGRO_COLOR;
pub extern func al_map_rgba(r: u8,g: u8,b: u8,a: u8) ALLEGRO_COLOR;
pub extern func al_map_rgb_f(r: f32,g: f32,b: f32) ALLEGRO_COLOR;
pub extern func al_map_rgba_f(r: f32,g: f32,b: f32,a: f32) ALLEGRO_COLOR;
pub extern func al_unmap_rgb(color: ALLEGRO_COLOR,r: *u8,g: *u8,b: *u8) void;
pub extern func al_unmap_rgba(color: ALLEGRO_COLOR,r: *u8,g: *u8,b: *u8,a: *u8) void;
pub extern func al_unmap_rgb_f(color: ALLEGRO_COLOR,r: *f32,g: *f32,b: *f32) void;
pub extern func al_unmap_rgba_f(color: ALLEGRO_COLOR,r: *f32,g: *f32,b: *f32,a: *f32) void;
pub extern func al_get_pixel_size(format: i32) i32;
pub extern func al_get_pixel_format_bits(format: i32) i32;
pub extern func al_get_pixel_block_size(format: i32) i32;
pub extern func al_get_pixel_block_width(format: i32) i32;
pub extern func al_get_pixel_block_height(format: i32) i32;

constexpr ALLEGRO_FLIP_HORIZONTAL = 0x00001
constexpr ALLEGRO_FLIP_VERTICAL   = 0x00002

pub extern func al_draw_bitmap(bitmap: *ALLEGRO_BITMAP,dx: f32,dy: f32,flags: i32) void;
pub extern func al_draw_bitmap_region(
    bitmap: *ALLEGRO_BITMAP,
    sx: f32,
    sy: f32,
    sw: f32,
    sh: f32,
    dx: f32,
    dy: f32,
    flags: i32
) void;

pub extern func al_draw_scaled_bitmap(
    bitmap: *ALLEGRO_BITMAP,
    cx: f32,
    cy: f32,
    dx: f32,
    dy: f32,
    angle: f32,
    flags: i32
) void;

pub extern func al_draw_rotated_bitmap(
    bitmap: *ALLEGRO_BITMAP,
    cx: f32,
    cy: f32,
    dx: f32,
    dy: f32,
    xscale: f32,
    yscale: f32,
    angle: f32,
    flags: i32
) void;

pub extern func al_draw_tinted_bitmap(
    bitmap: *ALLEGRO_BITMAP,
    tint: ALLEGRO_COLOR,
    dx: f32,
    dy: f32,
    flags: i32
) void;

constexpr ALLEGRO_ZERO = 0
constexpr ALLEGRO_ONE = 1
constexpr ALLEGRO_ALPHA = 2
constexpr ALLEGRO_INVERSE_ALPHA = 3
constexpr ALLEGRO_SRC_COLOR = 4
constexpr ALLEGRO_DEST_COLOR = 5
constexpr ALLEGRO_INVERSE_SRC_COLOR = 6
constexpr ALLEGRO_INVERSE_DEST_COLOR = 7
constexpr ALLEGRO_CONST_COLOR = 8
constexpr ALLEGRO_INVERSE_CONST_COLOR = 9
constexpr ALLEGRO_NUM_BLEND_MODES = 10
constexpr ALLEGRO_ADD = 0
constexpr ALLEGRO_SRC_MINUS_DEST = 1
constexpr ALLEGRO_DEST_MINUS_SRC = 2

pub extern func al_set_blender(op: i32,src: i32,dest: i32) void;
pub extern func al_set_blend_color(color: ALLEGRO_COLOR) void;
pub extern func al_get_blender(op: *i32,src: *i32,dst: *i32) void;
pub extern func al_get_blend_color() ALLEGRO_COLOR;
pub extern func al_set_separate_blender(op: i32,src: i32,dst: i32,a: i32,a_s: i32,ad: i32) void;
pub extern func al_get_separate_blender(op: *i32,src: *i32,dst: *i32,a: *i32,a_s: *i32,ad: *i32) void;

constexpr ALLEGRO_WINDOWED                    = 1 << 0
constexpr ALLEGRO_FULLSCREEN                  = 1 << 1
constexpr ALLEGRO_OPENGL                      = 1 << 2
constexpr ALLEGRO_DIRECT3D_INTERNAL           = 1 << 3
constexpr ALLEGRO_RESIZABLE                   = 1 << 4
constexpr ALLEGRO_FRAMELESS                   = 1 << 5
constexpr ALLEGRO_NOFRAME                     = ALLEGRO_FRAMELESS /* older synonym */
constexpr ALLEGRO_GENERATE_EXPOSE_EVENTS      = 1 << 6
constexpr ALLEGRO_OPENGL_3_0                  = 1 << 7
constexpr ALLEGRO_OPENGL_FORWARD_COMPATIBLE   = 1 << 8
constexpr ALLEGRO_FULLSCREEN_WINDOW           = 1 << 9
constexpr ALLEGRO_MINIMIZED                   = 1 << 10
constexpr ALLEGRO_PROGRAMMABLE_PIPELINE       = 1 << 11
constexpr ALLEGRO_GTK_TOPLEVEL_INTERNAL       = 1 << 12
constexpr ALLEGRO_MAXIMIZED                   = 1 << 13
constexpr ALLEGRO_OPENGL_ES_PROFILE           = 1 << 14
constexpr ALLEGRO_RED_SIZE = 0
constexpr ALLEGRO_GREEN_SIZE = 1
constexpr ALLEGRO_BLUE_SIZE = 2
constexpr ALLEGRO_ALPHA_SIZE = 3
constexpr ALLEGRO_RED_SHIFT = 4
constexpr ALLEGRO_GREEN_SHIFT = 5
constexpr ALLEGRO_BLUE_SHIFT = 6
constexpr ALLEGRO_ALPHA_SHIFT = 7
constexpr ALLEGRO_ACC_RED_SIZE = 8
constexpr ALLEGRO_ACC_GREEN_SIZE = 9
constexpr ALLEGRO_ACC_BLUE_SIZE = 10
constexpr ALLEGRO_ACC_ALPHA_SIZE = 11
constexpr ALLEGRO_STEREO = 12
constexpr ALLEGRO_AUX_BUFFERS = 13
constexpr ALLEGRO_COLOR_SIZE = 14
constexpr ALLEGRO_DEPTH_SIZE = 15
constexpr ALLEGRO_STENCIL_SIZE = 16
constexpr ALLEGRO_SAMPLE_BUFFERS = 17
constexpr ALLEGRO_SAMPLES = 18
constexpr ALLEGRO_RENDER_METHOD = 19
constexpr ALLEGRO_FLOAT_COLOR = 20
constexpr ALLEGRO_FLOAT_DEPTH = 21
constexpr ALLEGRO_SINGLE_BUFFER = 22
constexpr ALLEGRO_SWAP_METHOD = 23
constexpr ALLEGRO_COMPATIBLE_DISPLAY = 24
constexpr ALLEGRO_UPDATE_DISPLAY_REGION = 25
constexpr ALLEGRO_VSYNC = 26
constexpr ALLEGRO_MAX_BITMAP_SIZE = 27
constexpr ALLEGRO_SUPPORT_NPOT_BITMAP = 28
constexpr ALLEGRO_CAN_DRAW_INTO_BITMAP = 29
constexpr ALLEGRO_SUPPORT_SEPARATE_ALPHA = 30
constexpr ALLEGRO_AUTO_CONVERT_BITMAPS = 31
constexpr ALLEGRO_SUPPORTED_ORIENTATIONS = 32
constexpr ALLEGRO_OPENGL_MAJOR_VERSION = 33
constexpr ALLEGRO_OPENGL_MINOR_VERSION = 34
constexpr ALLEGRO_DONTCARE = 0
constexpr ALLEGRO_REQUIRE = 1
constexpr ALLEGRO_SUGGEST = 2
constexpr ALLEGRO_DISPLAY_ORIENTATION_UNKNOWN = 0
constexpr ALLEGRO_DISPLAY_ORIENTATION_0_DEGREES = 1
constexpr ALLEGRO_DISPLAY_ORIENTATION_90_DEGREES = 2
constexpr ALLEGRO_DISPLAY_ORIENTATION_180_DEGREES = 4
constexpr ALLEGRO_DISPLAY_ORIENTATION_270_DEGREES = 8
constexpr ALLEGRO_DISPLAY_ORIENTATION_PORTRAIT = 5
constexpr ALLEGRO_DISPLAY_ORIENTATION_LANDSCAPE = 10
constexpr ALLEGRO_DISPLAY_ORIENTATION_ALL = 15
constexpr ALLEGRO_DISPLAY_ORIENTATION_FACE_UP = 16
constexpr ALLEGRO_DISPLAY_ORIENTATION_FACE_DOWN = 32

struct ALLEGRO_DISPLAY {}

pub extern func al_set_new_display_refresh_rate(rate: i32) void;
pub extern func al_set_new_display_flags(flags: i32) void;
pub extern func al_get_new_display_refresh_rate() i32;
pub extern func al_get_new_display_flags() i32;
pub extern func al_set_new_window_title(title: *char) void;
pub extern func al_get_new_window_title() *char;
pub extern func al_get_display_width(display: *ALLEGRO_DISPLAY) i32;
pub extern func al_get_display_height(display: *ALLEGRO_DISPLAY) i32;
pub extern func al_get_display_format(display: *ALLEGRO_DISPLAY) i32;
pub extern func al_get_display_refresh_rate(d: *ALLEGRO_DISPLAY) i32;
pub extern func al_get_display_flags(d: *ALLEGRO_DISPLAY) i32;
pub extern func al_get_display_orientation(d: *ALLEGRO_DISPLAY) i32;
pub extern func al_set_display_flag(d: *ALLEGRO_DISPLAY,flag: i32,onoff: bool) bool;
pub extern func al_create_display(w: i32,h: i32) *ALLEGRO_DISPLAY;
pub extern func al_destroy_display(d: *ALLEGRO_DISPLAY) void;
pub extern func al_get_current_display() *ALLEGRO_DISPLAY;
pub extern func al_set_target_bitmap(b: *ALLEGRO_BITMAP) void;
pub extern func al_set_target_backbuffer(b: *ALLEGRO_DISPLAY) void;
pub extern func al_get_backbuffer(d: *ALLEGRO_DISPLAY) *ALLEGRO_BITMAP;
pub extern func al_get_target_bitmap() *ALLEGRO_BITMAP;
pub extern func al_wait_for_sync() bool;
pub extern func al_set_window_title(d: *ALLEGRO_DISPLAY,title: *char) void;
pub extern func al_set_new_display_option(opt: i32,val: i32,i: i32) void;
pub extern func al_get_new_display_option(opt: i32,i: *i32) i32;
pub extern func al_reset_new_display_options() void;
pub extern func al_set_display_option(d: *ALLEGRO_DISPLAY,opt: i32,val: i32) void;
pub extern func al_get_display_option(d: *ALLEGRO_DISPLAY,opt: i32) i32;
pub extern func al_hold_bitmap_drawing(hold: bool) void;
pub extern func al_is_bitmap_drawing_held() bool;
pub extern func al_get_new_display_adapter() i32;
pub extern func al_set_new_display_adapter(adapter: i32) void;
pub extern func al_set_new_window_position(x: i32,y: i32) void;
pub extern func al_get_new_window_position(x: *i32,y: *i32) void;
pub extern func al_set_window_position(d: *ALLEGRO_DISPLAY,x: i32,y: i32) void;
pub extern func al_get_window_position(d: *ALLEGRO_DISPLAY,x: *i32,y: *i32) void;
pub extern func al_set_window_constraints(d: *ALLEGRO_DISPLAY,min_w: i32,min_h: i32,max_w: i32,max_h: i32) bool;
pub extern func al_get_window_constraints(d: *ALLEGRO_DISPLAY,min_w: *i32,min_h: *i32,max_w: *i32,max_h: *i32) bool;
pub extern func al_apply_window_constraints(d: *ALLEGRO_DISPLAY,onoff: bool) void;
constexpr ALLEGRO_PIXEL_FORMAT_ANY = 0
constexpr ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA = 1
constexpr ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA = 2
constexpr ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA = 3
constexpr ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA = 4
constexpr ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA = 5
constexpr ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA = 6
constexpr ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA = 7
constexpr ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA = 8
constexpr ALLEGRO_PIXEL_FORMAT_ARGB_8888 = 9
constexpr ALLEGRO_PIXEL_FORMAT_RGBA_8888 = 10
constexpr ALLEGRO_PIXEL_FORMAT_ARGB_4444 = 11
constexpr ALLEGRO_PIXEL_FORMAT_RGB_888 = 12 /* 24 bit format */
constexpr ALLEGRO_PIXEL_FORMAT_RGB_565 = 13
constexpr ALLEGRO_PIXEL_FORMAT_RGB_555 = 14
constexpr ALLEGRO_PIXEL_FORMAT_RGBA_5551 = 15
constexpr ALLEGRO_PIXEL_FORMAT_ARGB_1555 = 16
constexpr ALLEGRO_PIXEL_FORMAT_ABGR_8888 = 17
constexpr ALLEGRO_PIXEL_FORMAT_XBGR_8888 = 18
constexpr ALLEGRO_PIXEL_FORMAT_BGR_888 = 19 /* 24 bit format */
constexpr ALLEGRO_PIXEL_FORMAT_BGR_565 = 20
constexpr ALLEGRO_PIXEL_FORMAT_BGR_555 = 21
constexpr ALLEGRO_PIXEL_FORMAT_RGBX_8888 = 22
constexpr ALLEGRO_PIXEL_FORMAT_XRGB_8888 = 23
constexpr ALLEGRO_PIXEL_FORMAT_ABGR_F32 = 24
constexpr ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE = 25
constexpr ALLEGRO_PIXEL_FORMAT_RGBA_4444 = 26
constexpr ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8 = 27
constexpr ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1 = 28
constexpr ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3 = 29
constexpr ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5 = 30
constexpr ALLEGRO_NUM_PIXEL_FORMATS = 31

constexpr ALLEGRO_PI = 3.14159265358979323846

constexpr ALLEGRO_MEMORY_BITMAP            = 0x0001
constexpr _ALLEGRO_KEEP_BITMAP_FORMAT      = 0x0002	/* now a bitmap loader flag */
constexpr ALLEGRO_FORCE_LOCKING            = 0x0004	/* no longer honoured */
constexpr ALLEGRO_NO_PRESERVE_TEXTURE      = 0x0008
constexpr _ALLEGRO_ALPHA_TEST              = 0x0010   /* now a render state flag */
constexpr _ALLEGRO_INTERNAL_OPENGL         = 0x0020
constexpr ALLEGRO_MIN_LINEAR               = 0x0040
constexpr ALLEGRO_MAG_LINEAR               = 0x0080
constexpr ALLEGRO_MIPMAP                   = 0x0100
constexpr _ALLEGRO_NO_PREMULTIPLIED_ALPHA  = 0x0200	/* now a bitmap loader flag */
constexpr ALLEGRO_VIDEO_BITMAP             = 0x0400
constexpr ALLEGRO_CONVERT_BITMAP           = 0x1000

struct ALLEGRO_BITMAP {}

pub extern func al_set_new_bitmap_format(format: i32) void;
pub extern func al_set_new_bitmap_flags(flags: i32) void;
pub extern func al_get_new_bitmap_format() i32;
pub extern func al_get_new_bitmap_flags() i32;
pub extern func al_add_new_bitmap_flag(flag: i32) void;
pub extern func al_get_bitmap_width(bitmap: *ALLEGRO_BITMAP) i32;
pub extern func al_get_bitmap_height(bitmap: *ALLEGRO_BITMAP) i32;
pub extern func al_get_bitmap_format(bitmap: *ALLEGRO_BITMAP) i32;
pub extern func al_get_bitmap_flags(bitmap: *ALLEGRO_BITMAP) i32;
pub extern func al_create_bitmap(w: i32,h: i32) *ALLEGRO_BITMAP;
pub extern func al_destroy_bitmap(bitmap: *ALLEGRO_BITMAP) void;
pub extern func al_put_pixel(x: i32,y: i32,color: ALLEGRO_COLOR) void;
pub extern func al_put_blended_pixel(x: i32,y: i32,color: ALLEGRO_COLOR) void;
pub extern func al_get_pixel(bitmap: *ALLEGRO_BITMAP,x: i32,y: i32) ALLEGRO_COLOR;
pub extern func al_convert_mask_to_alpha(bitmap: *ALLEGRO_BITMAP,mask_color: ALLEGRO_COLOR) void;
pub extern func al_set_clipping_rectangle(x: i32,y: i32,w: i32,h: i32) void;
pub extern func al_reset_clipping_rectangle() void;
pub extern func al_get_clipping_rectangle(x: *i32,y: *i32,w: *i32,h: *i32) void;
pub extern func al_create_sub_bitmap(parent: *ALLEGRO_BITMAP,x: i32,y: i32,w: i32,h: i32) *ALLEGRO_BITMAP;
pub extern func al_is_sub_bitmap(bitmap: *ALLEGRO_BITMAP) bool;
pub extern func al_get_parent_bitmap(bitmap: *ALLEGRO_BITMAP) *ALLEGRO_BITMAP;
pub extern func al_get_bitmap_x(bitmap: *ALLEGRO_BITMAP) i32;
pub extern func al_get_bitmap_y(bitmap: *ALLEGRO_BITMAP) i32;
pub extern func al_reparent_bitmap(bitmap: *ALLEGRO_BITMAP,
parent: *ALLEGRO_BITMAP,x: i32,y: i32,w: i32,h: i32) void;
pub extern func al_clone_bitmap(bitmap: *ALLEGRO_BITMAP) *ALLEGRO_BITMAP;
pub extern func al_convert_bitmap(bitmap: *ALLEGRO_BITMAP) void;
pub extern func al_convert_memory_bitmaps() void;


struct ALLEGRO_TIMEOUT 
{
    __pad1__: u64,
    __pad2__: u64
}

pub extern func al_get_time() f64;
pub extern func al_reset(seconds: f64) void;
pub extern func al_init_timeout(timeout: *ALLEGRO_TIMEOUT,seconds: f64) void;
pub extern func al_clear_to_color(colro: ALLEGRO_COLOR) void;
pub extern func al_clear_depth_buffer(x: f32) void;
pub extern func al_draw_pixel(x: f32,y: f32,color: ALLEGRO_COLOR) void;

   constexpr ALLEGRO_KEY_A		= 1
   constexpr ALLEGRO_KEY_B		= 2
   constexpr ALLEGRO_KEY_C		= 3
   constexpr ALLEGRO_KEY_D		= 4
   constexpr ALLEGRO_KEY_E		= 5
   constexpr ALLEGRO_KEY_F		= 6
   constexpr ALLEGRO_KEY_G		= 7
   constexpr ALLEGRO_KEY_H		= 8
   constexpr ALLEGRO_KEY_I		= 9
   constexpr ALLEGRO_KEY_J		= 10
   constexpr ALLEGRO_KEY_K		= 11
   constexpr ALLEGRO_KEY_L		= 12
   constexpr ALLEGRO_KEY_M		= 13
   constexpr ALLEGRO_KEY_N		= 14
   constexpr ALLEGRO_KEY_O		= 15
   constexpr ALLEGRO_KEY_P		= 16
   constexpr ALLEGRO_KEY_Q		= 17
   constexpr ALLEGRO_KEY_R		= 18
   constexpr ALLEGRO_KEY_S		= 19
   constexpr ALLEGRO_KEY_T		= 20
   constexpr ALLEGRO_KEY_U		= 21
   constexpr ALLEGRO_KEY_V		= 22
   constexpr ALLEGRO_KEY_W		= 23
   constexpr ALLEGRO_KEY_X		= 24
   constexpr ALLEGRO_KEY_Y		= 25
   constexpr ALLEGRO_KEY_Z		= 26

   constexpr ALLEGRO_KEY_0		= 27
   constexpr ALLEGRO_KEY_1		= 28
   constexpr ALLEGRO_KEY_2		= 29
   constexpr ALLEGRO_KEY_3		= 30
   constexpr ALLEGRO_KEY_4		= 31
   constexpr ALLEGRO_KEY_5		= 32
   constexpr ALLEGRO_KEY_6		= 33
   constexpr ALLEGRO_KEY_7		= 34
   constexpr ALLEGRO_KEY_8		= 35
   constexpr ALLEGRO_KEY_9		= 36

   constexpr ALLEGRO_KEY_PAD_0		= 37
   constexpr ALLEGRO_KEY_PAD_1		= 38
   constexpr ALLEGRO_KEY_PAD_2		= 39
   constexpr ALLEGRO_KEY_PAD_3		= 40
   constexpr ALLEGRO_KEY_PAD_4		= 41
   constexpr ALLEGRO_KEY_PAD_5		= 42
   constexpr ALLEGRO_KEY_PAD_6		= 43
   constexpr ALLEGRO_KEY_PAD_7		= 44
   constexpr ALLEGRO_KEY_PAD_8		= 45
   constexpr ALLEGRO_KEY_PAD_9		= 46

   constexpr ALLEGRO_KEY_F1		= 47
   constexpr ALLEGRO_KEY_F2		= 48
   constexpr ALLEGRO_KEY_F3		= 49
   constexpr ALLEGRO_KEY_F4		= 50
   constexpr ALLEGRO_KEY_F5		= 51
   constexpr ALLEGRO_KEY_F6		= 52
   constexpr ALLEGRO_KEY_F7		= 53
   constexpr ALLEGRO_KEY_F8		= 54
   constexpr ALLEGRO_KEY_F9		= 55
   constexpr ALLEGRO_KEY_F10		= 56
   constexpr ALLEGRO_KEY_F11		= 57
   constexpr ALLEGRO_KEY_F12		= 58

   constexpr ALLEGRO_KEY_ESCAPE	= 59
   constexpr ALLEGRO_KEY_TILDE		= 60
   constexpr ALLEGRO_KEY_MINUS		= 61
   constexpr ALLEGRO_KEY_EQUALS	= 62
   constexpr ALLEGRO_KEY_BACKSPACE	= 63
   constexpr ALLEGRO_KEY_TAB		= 64
   constexpr ALLEGRO_KEY_OPENBRACE	= 65
   constexpr ALLEGRO_KEY_CLOSEBRACE	= 66
   constexpr ALLEGRO_KEY_ENTER		= 67
   constexpr ALLEGRO_KEY_SEMICOLON	= 68
   constexpr ALLEGRO_KEY_QUOTE		= 69
   constexpr ALLEGRO_KEY_BACKSLASH	= 70
   constexpr ALLEGRO_KEY_BACKSLASH2	= 71 /* DirectInput calls this DIK_OEM_102: "< > | on UK/Germany keyboards" */
   constexpr ALLEGRO_KEY_COMMA		= 72
   constexpr ALLEGRO_KEY_FULLSTOP	= 73
   constexpr ALLEGRO_KEY_SLASH		= 74
   constexpr ALLEGRO_KEY_SPACE		= 75

   constexpr ALLEGRO_KEY_INSERT	= 76
   constexpr ALLEGRO_KEY_DELETE	= 77
   constexpr ALLEGRO_KEY_HOME		= 78
   constexpr ALLEGRO_KEY_END		= 79
   constexpr ALLEGRO_KEY_PGUP		= 80
   constexpr ALLEGRO_KEY_PGDN		= 81
   constexpr ALLEGRO_KEY_LEFT		= 82
   constexpr ALLEGRO_KEY_RIGHT		= 83
   constexpr ALLEGRO_KEY_UP		= 84
   constexpr ALLEGRO_KEY_DOWN		= 85

   constexpr ALLEGRO_KEY_PAD_SLASH	= 86
   constexpr ALLEGRO_KEY_PAD_ASTERISK	= 87
   constexpr ALLEGRO_KEY_PAD_MINUS	= 88
   constexpr ALLEGRO_KEY_PAD_PLUS	= 89
   constexpr ALLEGRO_KEY_PAD_DELETE	= 90
   constexpr ALLEGRO_KEY_PAD_ENTER	= 91

   constexpr ALLEGRO_KEY_PRINTSCREEN	= 92
   constexpr ALLEGRO_KEY_PAUSE		= 93

   constexpr ALLEGRO_KEY_ABNT_C1	= 94
   constexpr ALLEGRO_KEY_YEN		= 95
   constexpr ALLEGRO_KEY_KANA		= 96
   constexpr ALLEGRO_KEY_CONVERT	= 97
   constexpr ALLEGRO_KEY_NOCONVERT	= 98
   constexpr ALLEGRO_KEY_AT		= 99
   constexpr ALLEGRO_KEY_CIRCUMFLEX	= 100
   constexpr ALLEGRO_KEY_COLON2	= 101
   constexpr ALLEGRO_KEY_KANJI		= 102

   constexpr ALLEGRO_KEY_PAD_EQUALS	= 103	/* MacOS X */
   constexpr ALLEGRO_KEY_BACKQUOTE	= 104	/* MacOS X */
   constexpr ALLEGRO_KEY_SEMICOLON2	= 105	/* MacOS X -- TODO: ask lillo what this should be */
   constexpr ALLEGRO_KEY_COMMAND	= 106	/* MacOS X */
   
   constexpr ALLEGRO_KEY_BACK = 107        /* Android back key */
   constexpr ALLEGRO_KEY_VOLUME_UP = 108
   constexpr ALLEGRO_KEY_VOLUME_DOWN = 109

   /* Android game keys */
   constexpr ALLEGRO_KEY_SEARCH       = 110
   constexpr ALLEGRO_KEY_DPAD_CENTER  = 111
   constexpr ALLEGRO_KEY_BUTTON_X     = 112
   constexpr ALLEGRO_KEY_BUTTON_Y     = 113
   constexpr ALLEGRO_KEY_DPAD_UP      = 114
   constexpr ALLEGRO_KEY_DPAD_DOWN    = 115
   constexpr ALLEGRO_KEY_DPAD_LEFT    = 116
   constexpr ALLEGRO_KEY_DPAD_RIGHT   = 117
   constexpr ALLEGRO_KEY_SELECT       = 118
   constexpr ALLEGRO_KEY_START        = 119
   constexpr ALLEGRO_KEY_BUTTON_L1    = 120
   constexpr ALLEGRO_KEY_BUTTON_R1    = 121
   constexpr ALLEGRO_KEY_BUTTON_L2    = 122
   constexpr ALLEGRO_KEY_BUTTON_R2    = 123
   constexpr ALLEGRO_KEY_BUTTON_A     = 124
   constexpr ALLEGRO_KEY_BUTTON_B     = 125
   constexpr ALLEGRO_KEY_THUMBL       = 126
   constexpr ALLEGRO_KEY_THUMBR       = 127
   
   constexpr ALLEGRO_KEY_UNKNOWN      = 128

   /* All codes up to before constexpr ALLEGRO_KEY_MODIFIERS can be freely
    * assignedas additional unknown keys like various multimedia
    * and application keys keyboards may have.
    */

   constexpr ALLEGRO_KEY_MODIFIERS	= 215

   constexpr ALLEGRO_KEY_LSHIFT	= 215
   constexpr ALLEGRO_KEY_RSHIFT	= 216
   constexpr ALLEGRO_KEY_LCTRL	= 217
   constexpr ALLEGRO_KEY_RCTRL	= 218
   constexpr ALLEGRO_KEY_ALT		= 219
   constexpr ALLEGRO_KEY_ALTGR	= 220
   constexpr ALLEGRO_KEY_LWIN		= 221
   constexpr ALLEGRO_KEY_RWIN		= 222
   constexpr ALLEGRO_KEY_MENU		= 223
   constexpr ALLEGRO_KEY_SCROLLLOCK = 224
   constexpr ALLEGRO_KEY_NUMLOCK	= 225
   constexpr ALLEGRO_KEY_CAPSLOCK	= 226

   constexpr ALLEGRO_KEY_MAX = 227

constexpr ALLEGRO_KEYMOD_SHIFT = 0x00001
constexpr ALLEGRO_KEYMOD_CTRL  = 0x00002
constexpr ALLEGRO_KEYMOD_ALT   = 0x00004
constexpr ALLEGRO_KEYMOD_LWIN  = 0x00008
constexpr ALLEGRO_KEYMOD_RWIN  = 0x00010
constexpr ALLEGRO_KEYMOD_MENU  = 0x00020
constexpr ALLEGRO_KEYMOD_ALTGR = 0x00040
constexpr ALLEGRO_KEYMOD_COMMAND = 0x00080
constexpr ALLEGRO_KEYMOD_SCROLLLOCK = 0x00100
constexpr ALLEGRO_KEYMOD_NUMLOCK = 0x00200
constexpr ALLEGRO_KEYMOD_CAPSLOCK = 0x00400

struct ALLEGRO_KEYBOARD {}
struct ALLEGRO_KEYBOARD_STATE {
    display: *ALLEGRO_DISPLAY,
}
/// in keyboard.h ALLEGRO_KEYBOARD_STATE got this field:  unsigned int __key_down__internal__[(ALLEGRO_KEY_MAX + 31) / 32];
/// and in jazz we can't represent array types yet so you should use this constant
/// when e.g calling malloc
constexpr ALLEGRO_KEYBORAD_SIZE = 8 + (ALLEGRO_KEY_MAX + 31) / 32 + 8

pub extern func al_is_keyboard_installed() bool;
pub extern func al_install_keyboard() bool;
pub extern func al_uninstall_keyboard() void;
pub extern func al_set_keyboard_leds(leds: i32) void;
pub extern func al_keycode_to_name(keycode: i32) *char;
pub extern func al_get_keyboard_state(state: *ALLEGRO_KEYBOARD_STATE) void;
pub extern func al_key_down(state: *ALLEGRO_KEYBOARD_STATE,keycode: i32) bool;
constexpr ALLEGRO_EVENT_JOYSTICK_AXIS               =  1
   constexpr ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN        =  2
   constexpr ALLEGRO_EVENT_JOYSTICK_BUTTON_UP          =  3
   constexpr ALLEGRO_EVENT_JOYSTICK_CONFIGURATION      =  4

   constexpr ALLEGRO_EVENT_KEY_DOWN                    = 10
   constexpr ALLEGRO_EVENT_KEY_CHAR                    = 11
   constexpr ALLEGRO_EVENT_KEY_UP                      = 12

   constexpr ALLEGRO_EVENT_MOUSE_AXES                  = 20
   constexpr ALLEGRO_EVENT_MOUSE_BUTTON_DOWN           = 21
   constexpr ALLEGRO_EVENT_MOUSE_BUTTON_UP             = 22
   constexpr ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY         = 23
   constexpr ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY         = 24
   constexpr ALLEGRO_EVENT_MOUSE_WARPED                = 25

   constexpr ALLEGRO_EVENT_TIMER                       = 30

   constexpr ALLEGRO_EVENT_DISPLAY_EXPOSE              = 40
   constexpr ALLEGRO_EVENT_DISPLAY_RESIZE              = 41
   constexpr ALLEGRO_EVENT_DISPLAY_CLOSE               = 42
   constexpr ALLEGRO_EVENT_DISPLAY_LOST                = 43
   constexpr ALLEGRO_EVENT_DISPLAY_FOUND               = 44
   constexpr ALLEGRO_EVENT_DISPLAY_SWITCH_IN           = 45
   constexpr ALLEGRO_EVENT_DISPLAY_SWITCH_OUT          = 46
   constexpr ALLEGRO_EVENT_DISPLAY_ORIENTATION         = 47
   constexpr ALLEGRO_EVENT_DISPLAY_HALT_DRAWING        = 48
   constexpr ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING      = 49

   constexpr ALLEGRO_EVENT_TOUCH_BEGIN                 = 50
   constexpr ALLEGRO_EVENT_TOUCH_END                   = 51
   constexpr ALLEGRO_EVENT_TOUCH_MOVE                  = 52
   constexpr ALLEGRO_EVENT_TOUCH_CANCEL                = 53
   
   constexpr ALLEGRO_EVENT_DISPLAY_CONNECTED           = 60
   constexpr ALLEGRO_EVENT_DISPLAY_DISCONNECTED        = 61

struct ALLEGRO_EVENT_SOURCE {
    __pad1: i32,__pad5: i32,
    __pad9: i32,__pad13: i32,
    __pad2: i32,__pad6: i32,__pad10: i32,__pad14: i32,
    __pad3: i32,__pad7: i32,__pad11: i32,__pad15: i32,
    __pad4: i32,__pad8: i32,__pad12: i32,__pad16: i32,
    
    __pad17: i32,__pad22: i32,__pad27: i32,__pad32: i32,
    __pad18: i32,__pad23: i32,__pad28: i32,
    __pad19: i32,__pad24: i32,__pad29: i32,
    __pad20: i32,__pad25: i32,__pad30: i32,
    __pad21: i32,__pad26: i32,__pad31: i32,
}

alias ALLEGRO_EVENT_TYPE = i32

pub struct ALLEGRO_ANY_EVENT {
    typ: i32,
    source: *ALLEGRO_EVENT_TYPE,
    timestamp: f64
}

pub struct ALLEGRO_DISPLAY_EVENT {
    typ: i32,
    source: *ALLEGRO_DISPLAY,
    timestamt: f64,
    x: i32,y: i32,
    width: i32,
    height: i32,
    orientation: i32
}

pub struct ALLEGRO_KEYBOARD_EVENT {
    typ: i32,
    source: *ALLEGRO_KEYBOARD,
    timestamp: f64,
    keycode: i32,
    unichar: i32,
    modifiers: u32,
    repeat_: bool
}

pub struct ALLEGRO_MOUSE_EVENT {

}
